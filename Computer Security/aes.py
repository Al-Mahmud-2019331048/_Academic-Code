# -*- coding: utf-8 -*-
"""aes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QX2x75NZNvKuqsqWkia4ft5o2cO7oqhJ
"""

# importing necessary library
import time
from hashlib import sha256

# Round constant (Rcon) used in key expansion

Rcon = [
    0x01000000, 0x02000000, 0x04000000, 0x08000000,
    0x10000000, 0x20000000, 0x40000000, 0x80000000,
    0x1B000000, 0x36000000
]

# Mapping Substitution Box (Sbox) Matrix Required For Using in SubBytes Step
Sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

# Mapping Inverse Substitution Box (InvSbox) Matrix Required For Using in InvSubBytes Step
InvSbox = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

# Rotate a word for key expansion.
def rotate_word(word):
    return (word << 8 & 0xFFFFFFFF) | (word >> 24)


# Substitute bytes in a word for key expansion.
def sub_word(word):
    return (
        Sbox[(word >> 24) & 0xFF] << 24 |
        Sbox[(word >> 16) & 0xFF] << 16 |
        Sbox[(word >> 8) & 0xFF] << 8 |
        Sbox[word & 0xFF]
    )

# Pad the input data to make its length a multiple of 16 bytes.
def padding_data(data):
    p_length = 16 - (len(data) % 16)
    padding = bytes([p_length] * p_length)
    return data + padding

# Remove padding from the data.
def unpadding_data(data):
    if len(data) == 0:
        raise ValueError("Data is empty, cannot unpad")
    p_length = data[-1]
    if p_length > 16 or p_length == 0:
        raise ValueError("Invalid padding length")
    if not all(x == p_length for x in data[-p_length:]):
        raise ValueError("Invalid padding content")
    return data[:-p_length]


# Helping Methods for AES incryption process
# Apply SubBytes transformation.
def sub_bytes(state):
    return [Sbox[byte] for byte in state]


def shift_rows(state):
    return [state[i] for i in [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11]]


def mix_columns(state):
    new_state = []
    for i in range(4):
        col = state[i*4:(i+1)*4]
        new_col = [
            gmul(col[0], 2) ^ gmul(col[1], 3) ^ gmul(col[2], 1) ^ gmul(col[3], 1),
            gmul(col[0], 1) ^ gmul(col[1], 2) ^ gmul(col[2], 3) ^ gmul(col[3], 1),
            gmul(col[0], 1) ^ gmul(col[1], 1) ^ gmul(col[2], 2) ^ gmul(col[3], 3),
            gmul(col[0], 3) ^ gmul(col[1], 1) ^ gmul(col[2], 1) ^ gmul(col[3], 2)
        ]
        new_state.extend(new_col)
    return new_state

# Helping Methods for AES decryption process

def inv_sub_bytes(state):
    return [InvSbox[byte] for byte in state]

def inv_shift_rows(state):
    return [state[i] for i in [0, 13, 10, 7, 4, 1, 14, 11, 8, 5, 2, 15, 12, 9, 6, 3]]


def inv_mix_columns(state):
    new_state = []
    for i in range(4):
        col = state[i*4:(i+1)*4]
        new_col = [
            gmul(col[0], 0x0e) ^ gmul(col[1], 0x0b) ^ gmul(col[2], 0x0d) ^ gmul(col[3], 0x09),
            gmul(col[0], 0x09) ^ gmul(col[1], 0x0e) ^ gmul(col[2], 0x0b) ^ gmul(col[3], 0x0d),
            gmul(col[0], 0x0d) ^ gmul(col[1], 0x09) ^ gmul(col[2], 0x0e) ^ gmul(col[3], 0x0b),
            gmul(col[0], 0x0b) ^ gmul(col[1], 0x0d) ^ gmul(col[2], 0x09) ^ gmul(col[3], 0x0e)
        ]
        new_state.extend(new_col)
    return new_state

# Perform Galois Field (GF(2^8)) multiplication of two numbers needed for mixing columns
def gmul(a, b):
    p = 0
    for counter in range(8):
        if b & 1:
            p ^= a
        carry = a & 0x80
        a <<= 1
        if carry:
            a ^= 0x11b
        b >>= 1
    return p

# Perform XOR operation on matrices. Helping function for add round key
def x_or(matrix1, matrix2):
    return [a ^ b for a, b in zip(matrix1, matrix2)]


# Adjust the length of the key.
def adjust_key(key, desired_len=16):
    if len(key) > desired_len:
        return key[:desired_len]  # Truncate to the desired length
    elif len(key) < desired_len:
        # Extend the key using a hash until it is the correct size
        while len(key) < desired_len:
            key += sha256(key.encode()).digest()
        return key[:desired_len]
    return key

# Expand the input key into a key schedule for AES encryption.
def key_expansion(input_key):
    start_time = time.time()
    expanded_keys = []
    key_bytes = [ord(char) for char in input_key]
    words = [key_bytes[i*4:(i+1)*4] for i in range(4)]
    words = [int.from_bytes(word, 'big') for word in words]
    for i in range(44):
        if i < 4:
            word = words[i]
        else:
            temp_word = expanded_keys[i - 1]
            if i % 4 == 0:
                temp_word = sub_word(rotate_word(temp_word)) ^ Rcon[i//4 - 1]
            word = temp_word ^ expanded_keys[i - 4]
        expanded_keys.append(word)
    end_time = time.time()
    return expanded_keys, end_time - start_time

# Encrypt plaintext using AES.
def aes_encrypt(plaintext, expanded_keys):
    start_time = time.time()
    plaintext = padding_data(plaintext.encode())
    encrypted = b''
    for start in range(0, len(plaintext), 16):
        block = plaintext[start:start+16]
        state = list(block)
        state = x_or(state, [((expanded_keys[i] >> (24 - 8 * j)) & 0xFF) for i in range(4) for j in range(4)])
        for round_num in range(1, 10):
            state = sub_bytes(state)
            state = shift_rows(state)
            state = mix_columns(state)
            round_key = [((expanded_keys[i + 4 * round_num] >> (24 - 8 * j)) & 0xFF) for i in range(4) for j in range(4)]
            state = x_or(state, round_key)
        state = sub_bytes(state)
        state = shift_rows(state)
        round_key = [((expanded_keys[i + 40] >> (24 - 8 * j)) & 0xFF) for i in range(4) for j in range(4)]
        state = x_or(state, round_key)
        encrypted += bytes(state)
    end_time = time.time()
    return encrypted, end_time - start_time

# Decrypt ciphertext using AES.
def aes_decrypt(ciphertext, expanded_keys):
    start_time = time.time()
    decrypted = b''
    for start in range(0, len(ciphertext), 16):
        block = ciphertext[start:start+16]
        state = list(block)
        state = x_or(state, [((expanded_keys[i + 40] >> (24 - 8 * j)) & 0xFF) for i in range(4) for j in range(4)])
        for round_num in range(9, 0, -1):
            state = inv_shift_rows(state)
            state = inv_sub_bytes(state)
            round_key = [((expanded_keys[i + 4 * round_num] >> (24 - 8 * j)) & 0xFF) for i in range(4) for j in range(4)]
            state = x_or(state, round_key)
            state = inv_mix_columns(state)
        state = inv_shift_rows(state)
        state = inv_sub_bytes(state)
        round_key = [((expanded_keys[i] >> (24 - 8 * j)) & 0xFF) for i in range(4) for j in range(4)]
        state = x_or(state, round_key)
        decrypted += bytes(state)
    decrypted = unpadding_data(decrypted)
    
    end_time = time.time()
    return decrypted, end_time - start_time

# Main function to run AES encryption and decryption.
def main():
    # key = "BUETCSEVSSUSTCSE"
    # plaintext = "BUETnightfallVsSUSTguessforce"
    key = input("Enter the encryption key (16 characters recommended): ")
    plaintext = input("Enter the plaintext (any size): ")
    key = adjust_key(key, 16)  # Adjust the key length.

    print(f"Key:\n-----\nIn ASCII: {key}\nIn HEX: {key.encode().hex()}\n")
    print(f"Plain Text:\n-----------\nIn ASCII: {plaintext}\nIn HEX: {plaintext.encode().hex()}\n")
    # Expanded keys and timing encryption
    expanded_keys, key_schedule_time = key_expansion(key)
    encrypted, encryption_time = aes_encrypt(plaintext, expanded_keys)

    # Display encrypted text in ASCII and HEX
    encrypted_ascii = ''.join(chr(byte) for byte in encrypted)
    if(len(plaintext)==16):
      encrypted_hex = encrypted.hex();
      encrypted_hex = encrypted_hex[:32]
      encrypted_ascii = encrypted_ascii[:16]
      print(f"Cipher Text:\n-------------\nIn ASCII: {encrypted_ascii}\nIn HEX: {encrypted_hex}\n")
    else:
       print(f"Cipher Text:\n-------------\nIn ASCII: {encrypted_ascii}\nIn HEX: {encrypted.hex()}\n")



    # Decrypt and calculate time
    decrypted, dec_time = aes_decrypt(encrypted, expanded_keys)
    decrypted_text = decrypted.decode('utf-8')

    # Display decrypted text in ASCII and HEX
    print(f"Decipher Text:\n---------------\nIn ASCII: {decrypted_text}\nIn HEX: {decrypted.hex()}\n")

    # Print execution times
    print(f"Execution Time:\n----------------\nKey Scheduling: {key_schedule_time:.6f} sec\nEncryption Time: {encryption_time:.6f} sec\nDecryption Time: {dec_time:.6f} sec")


if __name__ == "__main__":
    main()