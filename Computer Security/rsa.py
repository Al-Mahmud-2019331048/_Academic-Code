# -*- coding: utf-8 -*-
"""rsa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m73BcZul94QGhx87QgfW5hC1SR674QPo
"""

import random
import time
import sympy

def extended_gcd(a, b):
    """Extended Euclidean Algorithm for finding modular inverse."""
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = extended_gcd(b % a, a)
        return (g, x - (b // a) * y, y)

def mod_inverse(a, m):
    """Modular multiplicative inverse."""
    g, x, y = extended_gcd(a, m)
    if g != 1:
        raise Exception('Modular inverse does not exist')
    else:
        return x % m

def generate_prime(bits):
    """Generate a prime number of specified bits."""
    while True:
        prime_candidate = random.getrandbits(bits)
        if sympy.isprime(prime_candidate):
            return prime_candidate

def measure_time(start_time):
    """Measure time elapsed since start_time."""
    return time.time() - start_time

def generate_keypair(bits):
    """Generate RSA key pair."""
    p = generate_prime(bits // 2)
    q = generate_prime(bits // 2)
    n = p * q
    phi = (p - 1) * (q - 1)

    # Choose e such that 1 < e < phi and gcd(e, phi) = 1
    while True:
        e = random.randint(2, phi - 1)
        if sympy.isprime(e) and sympy.gcd(e, phi) == 1:
            break

    d = mod_inverse(e, phi)
    return ((e, n), (d, n))

def encrypt(text, public_key):
    """Encrypt text using RSA."""
    e, n = public_key
    encrypted_text = [pow(ord(char), e, n) for char in text]
    return encrypted_text

def decrypt(encrypted_text, private_key):
    """Decrypt encrypted text using RSA."""
    d, n = private_key
    decrypted_bytes = []
    for char in encrypted_text:
        decrypted_char = pow(char, d, n)  # Result is a large integer
        decrypted_bytes.extend(decrypted_char.to_bytes((decrypted_char.bit_length() + 7) // 8, byteorder='big'))
    return bytes(decrypted_bytes)

def main():
    bit_sizes = [16, 32, 64, 96]
    # plain_text = "BUETCSEVSSUSTCSE"
    plain_text = input("Enter the plaintext (any size): ")
    for bit_size in bit_sizes:
        print(f"Bit Size = {bit_size}\n")

        # Key Generation
        start_time = time.time()
        public_key, private_key = generate_keypair(bit_size)
        key_gen_time = measure_time(start_time)
        print(f"Public Key: (e, n) = {public_key}")
        print(f"Private Key: (d, n) = {private_key}\n")

        # Encryption
        start_time = time.time()
        encrypted_text = encrypt(plain_text, public_key)
        encryption_time = measure_time(start_time)
        print("Plain Text:")
        print(plain_text)
        print("Encrypted Text(ASCII):")
        print(encrypted_text)
        print(type(encrypted_text))

        # Decryption
        start_time = time.time()
        decrypted_text = decrypt(encrypted_text, private_key).decode('utf-8')
        decryption_time = measure_time(start_time)
        print("Decrypted Text:")
        print(decrypted_text)

        # Execution Time
        print("\nExecution Time:")
        print(f"Key Generation: {key_gen_time:.15e} sec")
        print(f"Encryption Time: {encryption_time:.15e} sec")
        print(f"Decryption Time: {decryption_time:.15e} sec")
        print("-" * 120)
        print()

if __name__ == "__main__":
    main()